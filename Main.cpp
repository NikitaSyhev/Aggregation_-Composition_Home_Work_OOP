//Ётот проект создан с помощью классического шаблона
#include <iostream>
#include <string>
#include "Composition.h"
#include"Agregation.h"






int main() {
	setlocale(LC_ALL, "Russian");


	std::cout << "Composition" << std::endl;
	Engine engine(200);
	Car car(200);
	 car.show();


	
	 std::cout << "Agregation" << std::endl;

	 ElectroEngine EE(100, 100);
	 Automobile Auto(EE);

	 Auto.showEngine();


	 //ѕлюсы и минусы композиции: 
	 //— одной стороны мы показываем, что один класс ¤вл¤етс¤ частью другого. » это более строгий вариант агрегации. ѕо сути, в агрегации, класс
	 //не может существовать без другого класса. » это говорит о том, что мы его создаем дл¤ узких целей.


	 //ѕлюсы и минусы агрегации:
	 //ћы показываем, что один класс ¤вл¤етс¤ частью другого. »меет пол¤ и методы другого класса. ћы можем работать по принципу матрешки, когда следующий
	 // класса можержит пол¤ родител¤. ѕлюс мы можем использовать новые классы более широко: и с прив¤зкой к главному классу и без. 















	return 0;
}